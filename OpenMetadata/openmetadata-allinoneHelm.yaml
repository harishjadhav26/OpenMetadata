---
# Source: openmetadata-dependencies/charts/opensearch/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "opensearch-pdb"
  labels:
    helm.sh/chart: opensearch-2.12.1
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/version: "2.7.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: opensearch
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: opensearch
      app.kubernetes.io/instance: openmetadata-dependencies
---
# Source: openmetadata-dependencies/charts/airflow/templates/rbac/airflow-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: airflow
  labels:
    app: airflow
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
---
# Source: openmetadata-dependencies/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.7.2
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
secrets:
  - name: mysql
---
# Source: openmetadata-dependencies/charts/airflow/templates/config/secret-config-envs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: openmetadata-dependencies-config-envs
  labels:
    app: airflow
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
## we must use `data` rather than `stringData` (see: https://github.com/helm/helm/issues/10010)
data:
  ## ================
  ## Linux Configs
  ## ================
  TZ: "RXRjL1VUQw=="

  ## ================
  ## Database Configs
  ## ================
  ## database host/port
  DATABASE_HOST: "bXlzcWw="
  DATABASE_PORT: "MzMwNg=="

  ## database configs
  DATABASE_DB: "YWlyZmxvd19kYg=="
  DATABASE_PROPERTIES: ""

  ## database credentials (from plain-text helm values)
  DATABASE_USER: "YWlyZmxvd191c2Vy"

  ## bash command which echos the URL encoded value of $DATABASE_USER
  DATABASE_USER_CMD: "ZWNobyAiJHtEQVRBQkFTRV9VU0VSfSIgfCBweXRob24zIC1jICJpbXBvcnQgdXJsbGliLnBhcnNlOyBlbmNvZGVkX3VzZXIgPSB1cmxsaWIucGFyc2UucXVvdGUoaW5wdXQoKSk7IHByaW50KGVuY29kZWRfdXNlciki"

  ## bash command which echos the URL encoded value of $DATABASE_PASSWORD
  DATABASE_PASSWORD_CMD: "ZWNobyAiJHtEQVRBQkFTRV9QQVNTV09SRH0iIHwgcHl0aG9uMyAtYyAiaW1wb3J0IHVybGxpYi5wYXJzZTsgZW5jb2RlZF9wYXNzID0gdXJsbGliLnBhcnNlLnF1b3RlKGlucHV0KCkpOyBwcmludChlbmNvZGVkX3Bhc3MpIg=="

  ## bash command which echos the DB connection string in SQLAlchemy format
  DATABASE_SQLALCHEMY_CMD: "ZWNobyAtbiAibXlzcWwrbXlzcWxkYjovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0ke0RBVEFCQVNFX1BST1BFUlRJRVN9Ig=="

  ## bash command which echos the DB connection string in Celery result_backend format
  DATABASE_CELERY_CMD: "ZWNobyAtbiAiZGIrbXlzcWw6Ly8kKGV2YWwgJERBVEFCQVNFX1VTRVJfQ01EKTokKGV2YWwgJERBVEFCQVNFX1BBU1NXT1JEX0NNRClAJHtEQVRBQkFTRV9IT1NUfToke0RBVEFCQVNFX1BPUlR9LyR7REFUQUJBU0VfREJ9JHtEQVRBQkFTRV9QUk9QRVJUSUVTfSI="

  ## ================
  ## Redis Configs
  ## ================

  ## ================
  ## Airflow Configs (General)
  ## ================
  AIRFLOW__CORE__DAGS_FOLDER: "L29wdC9haXJmbG93L2RhZ3M="
  AIRFLOW__CORE__EXECUTOR: "S3ViZXJuZXRlc0V4ZWN1dG9y"
  AIRFLOW__CORE__FERNET_KEY: "N1Q1MTJVWFNTbUJPa3BXaW1GSElWYjhqSzZsZm1TQXZ4NG1PNkFyZWhuYz0="
  AIRFLOW__WEBSERVER__SECRET_KEY: "VEhJUyBJUyBVTlNBRkUh"
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "ODA4MA=="
  AIRFLOW__CELERY__FLOWER_PORT: "NTU1NQ=="

  ## ================
  ## Airflow Configs (Database)
  ## ================
  AIRFLOW__CORE__SQL_ALCHEMY_CONN_CMD: "YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX1NRTEFMQ0hFTVlfQ01EIic="
  ## `core.sql_alchemy_conn` moved to `database.sql_alchemy_conn` in airflow 2.3.0
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN_CMD: "YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX1NRTEFMQ0hFTVlfQ01EIic="

  ## ================
  ## Airflow Configs (Triggerer)
  ## ================
  AIRFLOW__TRIGGERER__DEFAULT_CAPACITY: "MTAwMA=="

  ## ================
  ## Airflow Configs (Logging)
  ## ================
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: "L29wdC9haXJmbG93L2xvZ3M="
  AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: "L29wdC9haXJmbG93L2xvZ3MvZGFnX3Byb2Nlc3Nvcl9tYW5hZ2VyL2RhZ19wcm9jZXNzb3JfbWFuYWdlci5sb2c="
  AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: "L29wdC9haXJmbG93L2xvZ3Mvc2NoZWR1bGVy"

  ## ================
  ## Airflow Configs (Celery)
  ## ================

  ## ================
  ## Airflow Configs (Kubernetes)
  ## ================
  AIRFLOW__KUBERNETES__NAMESPACE: "ZGVmYXVsdA=="
  AIRFLOW__KUBERNETES_EXECUTOR__NAMESPACE: "ZGVmYXVsdA=="
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: "ZG9ja2VyLmdldGNvbGxhdGUuaW8vb3Blbm1ldGFkYXRhL2luZ2VzdGlvbg=="
  AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_REPOSITORY: "ZG9ja2VyLmdldGNvbGxhdGUuaW8vb3Blbm1ldGFkYXRhL2luZ2VzdGlvbg=="
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: "MS42LjU="
  AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_TAG: "MS42LjU="
  AIRFLOW__KUBERNETES__POD_TEMPLATE_FILE: "L29wdC9haXJmbG93L3BvZF90ZW1wbGF0ZXMvcG9kX3RlbXBsYXRlLnlhbWw="
  AIRFLOW__KUBERNETES_EXECUTOR__POD_TEMPLATE_FILE: "L29wdC9haXJmbG93L3BvZF90ZW1wbGF0ZXMvcG9kX3RlbXBsYXRlLnlhbWw="

  ## ================
  ## User Configs
  ## ================
  "AIRFLOW__API__AUTH_BACKENDS": "YWlyZmxvdy5hcGkuYXV0aC5iYWNrZW5kLnNlc3Npb24sYWlyZmxvdy5hcGkuYXV0aC5iYWNrZW5kLmJhc2ljX2F1dGg="
  "AIRFLOW__OPENMETADATA_AIRFLOW_APIS__DAG_GENERATED_CONFIGS": "L29wdC9haXJmbG93L2RhZ3M="
  "AIRFLOW__OPENMETADATA_SECRETS_MANAGER__AWS_ACCESS_KEY": ""
  "AIRFLOW__OPENMETADATA_SECRETS_MANAGER__AWS_ACCESS_KEY_ID": ""
  "AIRFLOW__OPENMETADATA_SECRETS_MANAGER__AWS_REGION": ""
---
# Source: openmetadata-dependencies/charts/airflow/templates/config/secret-webserver-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: openmetadata-dependencies-webserver-config
  labels:
    app: airflow
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
data:
  webserver_config.py: "ZnJvbSBmbGFza19hcHBidWlsZGVyLnNlY3VyaXR5Lm1hbmFnZXIgaW1wb3J0IEFVVEhfREIKCiMgdXNlIGVtYmVkZGVkIERCIGZvciBhdXRoCkFVVEhfVFlQRSA9IEFVVEhfREIK"
---
# Source: openmetadata-dependencies/charts/airflow/templates/db-migrations/db-migrations-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: openmetadata-dependencies-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
data:
  db_migrations.py: "CiMjIyMjIyMjIyMjIyMKIyMgSW1wb3J0cyAjIwojIyMjIyMjIyMjIyMjCmltcG9ydCBsb2dnaW5nCmltcG9ydCB0aW1lCmZyb20gYWlyZmxvdy51dGlscy5kYiBpbXBvcnQgdXBncmFkZWRiCgoKIyMjIyMjIyMjIyMjIwojIyBDb25maWdzICMjCiMjIyMjIyMjIyMjIyMKbG9nID0gbG9nZ2luZy5nZXRMb2dnZXIoX19maWxlX18pCmxvZy5zZXRMZXZlbCgiSU5GTyIpCgojIGhvdyBmcmVxdWVudGx5IHRvIGNoZWNrIGZvciB1bmFwcGxpZWQgbWlncmF0aW9ucwpDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMID0gMzAwCgoKIyMjIyMjIyMjIyMjIyMjCiMjIEZ1bmN0aW9ucyAjIwojIyMjIyMjIyMjIyMjIyMKZnJvbSBhaXJmbG93LnV0aWxzLmRiIGltcG9ydCBjaGVja19taWdyYXRpb25zCgoKZGVmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKSAtPiBib29sOgogICAgIiIiCiAgICBSZXR1cm4gYSBib29sZWFuIHJlcHJlc2VudGluZyBpZiB0aGUgZGF0YWJhc2UgaGFzIHVuYXBwbGllZCBtaWdyYXRpb25zLgogICAgIiIiCiAgICBsb2dfYWxlbWJpYyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCJhbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uIikKICAgIGxvZ19hbGVtYmljX2xldmVsID0gbG9nX2FsZW1iaWMubGV2ZWwKICAgIHRyeToKICAgICAgICBsb2dfYWxlbWJpYy5zZXRMZXZlbCgiV0FSTiIpCiAgICAgICAgY2hlY2tfbWlncmF0aW9ucygxKQogICAgICAgIGxvZ19hbGVtYmljLnNldExldmVsKGxvZ19hbGVtYmljX2xldmVsKQogICAgICAgIHJldHVybiBGYWxzZQogICAgZXhjZXB0IFRpbWVvdXRFcnJvcjoKICAgICAgICByZXR1cm4gVHJ1ZQoKCmRlZiBhcHBseV9kYl9taWdyYXRpb25zKCkgLT4gTm9uZToKICAgICIiIgogICAgQXBwbHkgYW55IHBlbmRpbmcgREIgbWlncmF0aW9ucy4KICAgICIiIgogICAgbG9nLmluZm8oIi0tLS0tLS0tIFNUQVJUIC0gQVBQTFkgREIgTUlHUkFUSU9OUyAtLS0tLS0tLSIpCiAgICB1cGdyYWRlZGIoKQogICAgbG9nLmluZm8oIi0tLS0tLS0tIEZJTklTSCAtIEFQUExZIERCIE1JR1JBVElPTlMgLS0tLS0tLS0iKQoKCmRlZiBtYWluKHN5bmNfZm9yZXZlcjogYm9vbCk6CiAgICAjIGluaXRpYWwgY2hlY2sgJiBhcHBseQogICAgaWYgbmVlZHNfZGJfbWlncmF0aW9ucygpOgogICAgICAgIGxvZy53YXJuaW5nKCJ0aGVyZSBhcmUgdW5hcHBsaWVkIGRiIG1pZ3JhdGlvbnMsIHRyaWdnZXJpbmcgYXBwbHkuLi4iKQogICAgICAgIGFwcGx5X2RiX21pZ3JhdGlvbnMoKQogICAgZWxzZToKICAgICAgICBsb2cuaW5mbygidGhlcmUgYXJlIG5vIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCBjb250aW51aW5nLi4uIikKCiAgICBpZiBzeW5jX2ZvcmV2ZXI6CiAgICAgICAgIyBkZWZpbmUgdmFyaWFibGUgdG8gdHJhY2sgaG93IGxvbmcgc2luY2UgbGFzdCBtaWdyYXRpb25zIGNoZWNrCiAgICAgICAgbWlncmF0aW9uc19jaGVja19lcG9jaCA9IHRpbWUudGltZSgpCgogICAgICAgICMgbWFpbiBsb29wCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgaWYgKHRpbWUudGltZSgpIC0gbWlncmF0aW9uc19jaGVja19lcG9jaCkgPiBDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMOgogICAgICAgICAgICAgICAgbG9nLmRlYnVnKGYiY2hlY2sgaW50ZXJ2YWwgcmVhY2hlZCwgY2hlY2tpbmcgZm9yIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLi4uIikKICAgICAgICAgICAgICAgIGlmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKToKICAgICAgICAgICAgICAgICAgICBsb2cud2FybmluZygidGhlcmUgYXJlIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCB0cmlnZ2VyaW5nIGFwcGx5Li4uIikKICAgICAgICAgICAgICAgICAgICBhcHBseV9kYl9taWdyYXRpb25zKCkKICAgICAgICAgICAgICAgIG1pZ3JhdGlvbnNfY2hlY2tfZXBvY2ggPSB0aW1lLnRpbWUoKQoKICAgICAgICAgICAgIyBlbnN1cmUgd2UgZG9udCBsb29wIHRvbyBmYXN0CiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQoKCiMjIyMjIyMjIyMjIyMjCiMjIFJ1biBNYWluICMjCiMjIyMjIyMjIyMjIyMjCm1haW4oc3luY19mb3JldmVyPVRydWUp"
---
# Source: openmetadata-dependencies/charts/airflow/templates/sync/sync-users-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: openmetadata-dependencies-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
data:
  sync_users.py: ""
---
# Source: openmetadata-dependencies/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.7.2
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mysql-root-password: "cGFzc3dvcmQ="
  mysql-password: "YUVpZU9Ea0pWNw=="
---
# Source: openmetadata-dependencies/charts/airflow/templates/config/configmap-pod-template.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: openmetadata-dependencies-pod-template
  labels:
    app: airflow
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
data:
  pod_template.yaml: |-
    
    apiVersion: v1
    kind: Pod
    metadata:
      name: dummy-name
    spec:
      restartPolicy: Never
      serviceAccountName: airflow
      shareProcessNamespace: false
      nodeSelector:
        {}
      topologySpreadConstraints:
        []
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      containers:
        - name: base      
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:        
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:
            ## KubernetesExecutor Pods use LocalExecutor internally
            - name: AIRFLOW__CORE__EXECUTOR
              value: LocalExecutor        
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "20"
          ports: []
          command: []
          args: []
          volumeMounts:        
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      volumes:    
        - name: dags-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-dags
        - name: logs-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-logs
---
# Source: openmetadata-dependencies/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.7.2
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: openmetadata-dependencies/charts/mysql/templates/primary/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.7.2
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  init_airflow_db_scripts.sql: |
    CREATE DATABASE airflow_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE USER 'airflow_user'@'%' IDENTIFIED BY 'airflow_pass';
    GRANT ALL PRIVILEGES ON airflow_db.* TO 'airflow_user'@'%' WITH GRANT OPTION;
    commit;
  init_openmetadata_db_scripts.sql: |
    CREATE DATABASE openmetadata_db;
    CREATE USER 'openmetadata_user'@'%' IDENTIFIED BY 'openmetadata_password';
    GRANT ALL PRIVILEGES ON openmetadata_db.* TO 'openmetadata_user'@'%' WITH GRANT OPTION;
    commit;
---
# Source: openmetadata-dependencies/charts/opensearch/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: opensearch-config
  labels:
    helm.sh/chart: opensearch-2.12.1
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/version: "2.7.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: opensearch
data:
  opensearch.yml: |
    plugins.security.disabled: true
---
# Source: openmetadata-dependencies/templates/configmap-pod-template.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: openmetadata-pod-template
  labels:
    app: openmetadata-dependencies
    chart: openmetadata-dependencies-1.6.5
    release: openmetadata-dependencies
    heritage: Helm
data:
  pod_template.yaml: |-
    
    apiVersion: v1
    kind: Pod
    metadata:
      name: dummy-name
    spec:
      restartPolicy: Never
      serviceAccountName: airflow
      shareProcessNamespace: false
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      containers:
        - name: base
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:
            ## KubernetesExecutor Pods use LocalExecutor internally
            - name: AIRFLOW__CORE__EXECUTOR
              value: LocalExecutor        
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "20"
          ports: []
          command: []
          args: []
          volumeMounts:        
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      volumes:    
        - name: dags-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-dags
        - name: logs-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-logs
---
# Source: openmetadata-dependencies/charts/airflow/templates/pvc-dags.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: openmetadata-dependencies-dags
  labels:
    app: airflow
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "1Gi"
---
# Source: openmetadata-dependencies/charts/airflow/templates/pvc-logs.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: openmetadata-dependencies-logs
  labels:
    app: airflow
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "1Gi"
---
# Source: openmetadata-dependencies/charts/airflow/templates/rbac/airflow-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: openmetadata-dependencies
  labels:
    app: airflow
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - "create"
  - "get"
  - "delete"
  - "list"
  - "patch"
  - "watch"
- apiGroups:
  - ""
  resources:
  - "pods/log"
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - "pods/exec"
  verbs:
  - "create"
  - "get"
---
# Source: openmetadata-dependencies/charts/airflow/templates/rbac/airflow-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: openmetadata-dependencies
  labels:
    app: airflow
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openmetadata-dependencies
subjects:
- kind: ServiceAccount
  name: airflow
  namespace: default
---
# Source: openmetadata-dependencies/charts/airflow/templates/webserver/webserver-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: openmetadata-dependencies-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: web
    release: openmetadata-dependencies
  sessionAffinity: None
  ports:
    - name: web
      appProtocol: "http"
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# Source: openmetadata-dependencies/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.7.2
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/component: primary
---
# Source: openmetadata-dependencies/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.7.2
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/component: primary
---
# Source: openmetadata-dependencies/charts/opensearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: opensearch
  labels:
    helm.sh/chart: opensearch-2.12.1
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/version: "2.7.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: opensearch
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: openmetadata-dependencies
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: openmetadata-dependencies/charts/opensearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: opensearch-headless
  labels:
    helm.sh/chart: opensearch-2.12.1
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/version: "2.7.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: opensearch
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like opensearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: openmetadata-dependencies
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
  - name: metrics
    port: 9600
---
# Source: openmetadata-dependencies/charts/airflow/templates/db-migrations/db-migrations-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openmetadata-dependencies-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: db-migrations
      release: openmetadata-dependencies
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6940f7577a10a076c0c4ef3d570cc6e5948c3f5499649a3ce5a6e937aa1d4feb
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/db-migrations-script: 37898f38b90abd06081105d992362ec9e0d0015123b69e758e59031a9e6ddfc9
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: db-migrations
        release: openmetadata-dependencies
    spec:
      restartPolicy: Always
      nodeSelector:
        {}
      topologySpreadConstraints:
        []
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: airflow
      initContainers:        
        - name: check-db  
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:    
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:    
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      containers:
        - name: db-migrations          
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:            
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:            
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:            
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/db_migrations.py"
          volumeMounts:            
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
      volumes:        
        - name: dags-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-dags
        - name: logs-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-logs
        - name: scripts
          secret:
            secretName: openmetadata-dependencies-db-migrations
---
# Source: openmetadata-dependencies/charts/airflow/templates/scheduler/scheduler-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openmetadata-dependencies-scheduler
  labels:
    app: airflow
    component: scheduler
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple schedulers can run concurrently (Airflow 2.0)
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: scheduler
      release: openmetadata-dependencies
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6940f7577a10a076c0c4ef3d570cc6e5948c3f5499649a3ce5a6e937aa1d4feb
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-pod-template: 90ea3ae5adb43bc3e769e8eee6b03ab8852ce289973ebc835c028b1aeebed58b
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: scheduler
        release: openmetadata-dependencies
    spec:
      restartPolicy: Always
      nodeSelector:
        {}
      topologySpreadConstraints:
        []
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: airflow
      initContainers:        
        - name: check-db  
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:    
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:    
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:         
        - name: wait-for-db-migrations  
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:    
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:    
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      containers:
        - name: airflow-scheduler          
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:            
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:            
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:            
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow scheduler -n -1"
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 60
            exec:
              command:                
                - "/usr/bin/dumb-init"
                - "--"
                - "/entrypoint"
                - "python"
                - "-Wignore"
                - "-c"
                - |
                  import os
                  import sys

                  # suppress logs triggered from importing airflow packages
                  os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

                  # shared imports
                  try:
                      from airflow.jobs.job import Job
                  except ImportError:
                      # `BaseJob` was renamed to `Job` in airflow 2.6.0
                      from airflow.jobs.base_job import BaseJob as Job
                  from airflow.utils.db import create_session
                  from airflow.utils.net import get_hostname

                  with create_session() as session:
                      ########################
                      # heartbeat check
                      ########################
                      # ensure the SchedulerJob with most recent heartbeat for this `hostname` is alive
                      hostname = get_hostname()
                      scheduler_job = session \
                          .query(Job) \
                          .filter_by(job_type="SchedulerJob") \
                          .filter_by(hostname=hostname) \
                          .order_by(Job.latest_heartbeat.desc()) \
                          .limit(1) \
                          .first()
                      if (scheduler_job is not None) and scheduler_job.is_alive():
                          pass
                      else:
                          sys.exit(f"The SchedulerJob (id={scheduler_job.id}) for hostname '{hostname}' is not alive")
          volumeMounts:            
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
            - name: pod-template
              mountPath: /opt/airflow/pod_templates/pod_template.yaml
              subPath: pod_template.yaml
              readOnly: true
      volumes:        
        - name: dags-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-dags
        - name: logs-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-logs
        - name: pod-template
          configMap:
            name: openmetadata-dependencies-pod-template
---
# Source: openmetadata-dependencies/charts/airflow/templates/sync/sync-users-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openmetadata-dependencies-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: sync-users
      release: openmetadata-dependencies
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6940f7577a10a076c0c4ef3d570cc6e5948c3f5499649a3ce5a6e937aa1d4feb
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-users-script: 613d865ef29db0c2d9b6370324a6d6b4a59c7a3338ac13674226e65a7499bbef
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-users
        release: openmetadata-dependencies
    spec:
      restartPolicy: Always
      nodeSelector:
        {}
      topologySpreadConstraints:
        []
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: airflow
      initContainers:        
        - name: check-db  
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:    
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:    
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:         
        - name: wait-for-db-migrations  
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:    
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:    
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      containers:
        - name: sync-airflow-users          
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:            
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:            
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:            
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/sync_users.py"
          volumeMounts:            
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
      volumes:        
        - name: dags-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-dags
        - name: logs-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-logs
        - name: scripts
          secret:
            secretName: openmetadata-dependencies-sync-users
---
# Source: openmetadata-dependencies/charts/airflow/templates/triggerer/triggerer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openmetadata-dependencies-triggerer
  labels:
    app: airflow
    component: triggerer
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple triggerer pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: triggerer
      release: openmetadata-dependencies
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6940f7577a10a076c0c4ef3d570cc6e5948c3f5499649a3ce5a6e937aa1d4feb
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: triggerer
        release: openmetadata-dependencies
    spec:
      restartPolicy: Always
      nodeSelector:
        {}
      topologySpreadConstraints:
        []
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: airflow
      securityContext:
        fsGroup: 0
      initContainers:        
        - name: check-db  
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:    
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:    
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:         
        - name: wait-for-db-migrations  
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:    
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:    
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      containers:
        - name: airflow-triggerer          
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:            
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:            
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:            
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow triggerer"
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 5
            exec:
              command:                
                - "/usr/bin/dumb-init"
                - "--"
                - "/entrypoint"
                - "python"
                - "-Wignore"
                - "-c"
                - |
                  import os
                  import sys

                  # suppress logs triggered from importing airflow packages
                  os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

                  # shared imports
                  try:
                      from airflow.jobs.job import Job
                  except ImportError:
                      # `BaseJob` was renamed to `Job` in airflow 2.6.0
                      from airflow.jobs.base_job import BaseJob as Job
                  from airflow.utils.db import create_session
                  from airflow.utils.net import get_hostname

                  with create_session() as session:
                      # ensure the TriggererJob with most recent heartbeat for this `hostname` is alive
                      hostname = get_hostname()
                      triggerer_job = session \
                          .query(Job) \
                          .filter_by(job_type="TriggererJob") \
                          .filter_by(hostname=hostname) \
                          .order_by(Job.latest_heartbeat.desc()) \
                          .limit(1) \
                          .first()
                      if (triggerer_job is not None) and triggerer_job.is_alive():
                          pass
                      else:
                          sys.exit(f"The TriggererJob (id={triggerer_job.id}) for hostname '{hostname}' is not alive")
          volumeMounts:            
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      volumes:        
        - name: dags-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-dags
        - name: logs-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-logs
---
# Source: openmetadata-dependencies/charts/airflow/templates/webserver/webserver-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openmetadata-dependencies-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.9.0
    release: openmetadata-dependencies
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple web pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: web
      release: openmetadata-dependencies
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6940f7577a10a076c0c4ef3d570cc6e5948c3f5499649a3ce5a6e937aa1d4feb
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-webserver-config: 91618ab68b57b2b813e073d6024932ef8880a6125eaae0d948863d011cf5968a
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: web
        release: openmetadata-dependencies
    spec:
      restartPolicy: Always
      nodeSelector:
        {}
      topologySpreadConstraints:
        []
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: airflow
      securityContext:
        fsGroup: 0
      initContainers:        
        - name: check-db  
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:    
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:    
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
            - mountPath: /opt/airflow/pod_templates/pod_template.yaml
              name: pod-template
              readOnly: true
              subPath: pod_template.yaml        
        - name: wait-for-db-migrations  
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:    
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:    
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
            - mountPath: /opt/airflow/pod_templates/pod_template.yaml
              name: pod-template
              readOnly: true
              subPath: pod_template.yaml
      containers:
        - name: airflow-web          
          image: docker.getcollate.io/openmetadata/ingestion:1.6.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          ports:
            - name: web
              containerPort: 8080
              protocol: TCP
          envFrom:            
            - secretRef:
                name: openmetadata-dependencies-config-envs
          env:            
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:            
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow webserver"
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 10
            httpGet:
              scheme: HTTP
              path: /health
              port: web
          readinessProbe:
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 10
            httpGet:
              scheme: HTTP
              path: /health
              port: web
          volumeMounts:            
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
            - mountPath: /opt/airflow/pod_templates/pod_template.yaml
              name: pod-template
              readOnly: true
              subPath: pod_template.yaml
            - name: webserver-config
              mountPath: /opt/airflow/webserver_config.py
              subPath: webserver_config.py
              readOnly: true
      volumes:        
        - name: dags-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-dags
        - name: logs-data
          persistentVolumeClaim:
            claimName: openmetadata-dependencies-logs
        - configMap:
            defaultMode: 420
            name: openmetadata-pod-template
          name: pod-template
        - name: webserver-config
          secret:
            secretName: openmetadata-dependencies-webserver-config
            defaultMode: 0644
---
# Source: openmetadata-dependencies/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.7.2
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels: 
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: openmetadata-dependencies
      app.kubernetes.io/component: primary
  serviceName: mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: cd53eacfa880de20b62496fc3d5ecff0262c5f5a09ea160256af0123f5a0554f
      labels:
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-9.7.2
        app.kubernetes.io/instance: openmetadata-dependencies
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mysql
                    app.kubernetes.io/instance: openmetadata-dependencies
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.33-debian-11-r0
          imagePullPolicy: "Always"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "my_database"
            - name: MYSQL_EXTRA_FLAGS
              value: "--sort_buffer_size=10M"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: mysql
        - name: custom-init-scripts
          configMap:
            name: mysql-init-scripts
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: mysql
          app.kubernetes.io/instance: openmetadata-dependencies
          app.kubernetes.io/component: primary
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "50Gi"
---
# Source: openmetadata-dependencies/charts/opensearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: opensearch
  labels:
    helm.sh/chart: opensearch-2.12.1
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: openmetadata-dependencies
    app.kubernetes.io/version: "2.7.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: opensearch
  annotations:
    majorVersion: "2"
spec:
  serviceName: opensearch-headless
  selector:
    matchLabels:
      app.kubernetes.io/name: opensearch
      app.kubernetes.io/instance: openmetadata-dependencies
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: opensearch
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "30Gi"
  template:
    metadata:
      name: "opensearch"
      labels:
        helm.sh/chart: opensearch-2.12.1
        app.kubernetes.io/name: opensearch
        app.kubernetes.io/instance: openmetadata-dependencies
        app.kubernetes.io/version: "2.7.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: opensearch
      annotations:
        configchecksum: e9acc41952a6fdae8a800efe4afe8b5d0df58d56f6f289d9744c7ce8f787644
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      serviceAccountName: ""
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - openmetadata-dependencies
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - opensearch
      terminationGracePeriodSeconds: 120
      volumes:
      - name: config
        configMap:
          name: opensearch-config
      enableServiceLinks: true
      initContainers:
      - name: fsgroup-volume
        image: "busybox:latest"
        imagePullPolicy: "IfNotPresent"
        command: ['sh', '-c']
        args:
          - 'chown -R 1000:1000 /usr/share/opensearch/data'
        securityContext:
          runAsUser: 0
        resources:
           
          {}
        volumeMounts:
          - name: "opensearch"
            mountPath: /usr/share/opensearch/data

      containers:
      - name: "opensearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000

        image: "opensearchproject/opensearch:2.7.0"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          failureThreshold: 3
          periodSeconds: 5
          tcpSocket:
            port: 9200
          timeoutSeconds: 3
        startupProbe:
          failureThreshold: 30
          initialDelaySeconds: 5
          periodSeconds: 10
          tcpSocket:
            port: 9200
          timeoutSeconds: 3
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        - name: metrics
          containerPort: 9600
        resources:
          limits:
            cpu: 2000m
            memory: 2048M
          requests:
            cpu: 100m
            memory: 256M
        env:
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: discovery.seed_hosts
          value: "opensearch-cluster-master-headless"
        - name: cluster.name
          value: "opensearch"
        - name: network.host
          value: "0.0.0.0"
        - name: OPENSEARCH_JAVA_OPTS
          value: "-Xmx1g -Xms1g"
        - name: node.roles
          value: "master,ingest,data,remote_cluster_client,"
        - name: discovery.type
          value: "single-node"
        volumeMounts:
        - name: "opensearch"
          mountPath: /usr/share/opensearch/data
        - name: config
          mountPath: /usr/share/opensearch/config/opensearch.yml
          subPath: opensearch.yml
