apiVersion: v1
data:
  sync_users.py: CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIyBCRUdJTjogR0xPQkFMIENPREUgIyMjIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIEdsb2JhbCBJbXBvcnRzICMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjCmltcG9ydCBsb2dnaW5nCmltcG9ydCBvcwppbXBvcnQgdGltZQpmcm9tIHN0cmluZyBpbXBvcnQgVGVtcGxhdGUKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIERpY3QsIE9wdGlvbmFsCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMgR2xvYmFsIENvbmZpZ3MgIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyB0aGUgcGF0aCB3aGljaCBTZWNyZXQvQ29uZmlnTWFwIGFyZSBtb3VudGVkIHRvCkNPTkZfX1RFTVBMQVRFU19QQVRIID0gIi9tbnQvdGVtcGxhdGVzIgoKIyBob3cgZnJlcXVlbnRseSB0byBjaGVjayBmb3IgU2VjcmV0L0NvbmZpZ01hcCB1cGRhdGVzCkNPTkZfX1RFTVBMQVRFU19TWU5DX0lOVEVSVkFMID0gMTAKCiMgaG93IGZyZXF1ZW50bHkgdG8gcmUtc3luYyBvYmplY3RzIChDb25uZWN0aW9ucywgUG9vbHMsIFVzZXJzLCBWYXJpYWJsZXMpCkNPTkZfX09CSkVDVFNfU1lOQ19JTlRFUlZBTCA9IDYwCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyBHbG9iYWwgRnVuY3Rpb25zICMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKZGVmIHN0cmluZ19zdWJzdGl0dXRpb24ocmF3X3N0cmluZzogT3B0aW9uYWxbc3RyXSwgc3Vic3RpdHV0aW9uX21hcDogRGljdFtzdHIsIHN0cl0pIC0+IHN0cjoKICAgICIiIgogICAgQXBwbHkgYmFzaC1saWtlIHN1YnN0aXR1dGlvbnMgdG8gYSByYXcgc3RyaW5nLgoKICAgIEV4YW1wbGU6CiAgICAtIHN0cmluZ19zdWJzdGl0dXRpb24oIkhlbGxvISIsIE5vbmUpIC0+ICJIZWxsbyEiCiAgICAtIHN0cmluZ19zdWJzdGl0dXRpb24oIkhlbGxvICR7TkFNRX0hIiwgeyJOQU1FIjogIkFpcmZsb3cifSkgLT4gIkhlbGxvIEFpcmZsb3chIgogICAgIiIiCiAgICBpZiByYXdfc3RyaW5nIGFuZCBsZW4oc3Vic3RpdHV0aW9uX21hcCkgPiAwOgogICAgICAgIHRwbCA9IFRlbXBsYXRlKHJhd19zdHJpbmcpCiAgICAgICAgcmV0dXJuIHRwbC5zYWZlX3N1YnN0aXR1dGUoc3Vic3RpdHV0aW9uX21hcCkKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIHJhd19zdHJpbmcKCgpkZWYgdGVtcGxhdGVfbXRpbWUodGVtcGxhdGVfbmFtZTogc3RyKSAtPiBmbG9hdDoKICAgICIiIgogICAgUmV0dXJuIHRoZSBtb2RpZmljYXRpb24tdGltZSBvZiB0aGUgZmlsZSBzdG9yaW5nIGB0ZW1wbGF0ZV9uYW1lYAogICAgIiIiCiAgICBmaWxlX3BhdGggPSBmIntDT05GX19URU1QTEFURVNfUEFUSH0ve3RlbXBsYXRlX25hbWV9IgogICAgcmV0dXJuIG9zLnN0YXQoZmlsZV9wYXRoKS5zdF9tdGltZQoKCmRlZiB0ZW1wbGF0ZV92YWx1ZSh0ZW1wbGF0ZV9uYW1lOiBzdHIpIC0+IHN0cjoKICAgICIiIgogICAgUmV0dXJuIHRoZSBjb250ZW50cyBvZiB0aGUgZmlsZSBzdG9yaW5nIGB0ZW1wbGF0ZV9uYW1lYAogICAgIiIiCiAgICBmaWxlX3BhdGggPSBmIntDT05GX19URU1QTEFURVNfUEFUSH0ve3RlbXBsYXRlX25hbWV9IgogICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgInIiKSBhcyBmOgogICAgICAgIHJldHVybiBmLnJlYWQoKQoKCmRlZiByZWZyZXNoX3RlbXBsYXRlX2NhY2hlKHRlbXBsYXRlX25hbWVzOiBMaXN0W3N0cl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlX210aW1lX2NhY2hlOiBEaWN0W3N0ciwgZmxvYXRdLAogICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZV92YWx1ZV9jYWNoZTogRGljdFtzdHIsIHN0cl0pIC0+IExpc3Rbc3RyXToKICAgICIiIgogICAgUmVmcmVzaCB0aGUgcHJvdmlkZWQgZGljdGlvbmFyeSBjYWNoZXMgb2YgdGVtcGxhdGUgdmFsdWVzICYgbXRpbWVzLgoKICAgIDpwYXJhbSB0ZW1wbGF0ZV9uYW1lczogdGhlIG5hbWVzIG9mIGFsbCB0ZW1wbGF0ZXMgdG8gcmVmcmVzaAogICAgOnBhcmFtIHRlbXBsYXRlX210aW1lX2NhY2hlOiB0aGUgZGljdGlvbmFyeSBjYWNoZSBvZiB0ZW1wbGF0ZSBmaWxlIG1vZGlmaWNhdGlvbi10aW1lcwogICAgOnBhcmFtIHRlbXBsYXRlX3ZhbHVlX2NhY2hlOiB0aGUgZGljdGlvbmFyeSBjYWNoZSBvZiB0ZW1wbGF0ZSB2YWx1ZXMKICAgIDpyZXR1cm46IHRoZSBuYW1lcyBvZiB0ZW1wbGF0ZXMgd2hpY2ggY2hhbmdlZAogICAgIiIiCiAgICBjaGFuZ2VkX3RlbXBsYXRlcyA9IFtdCiAgICBmb3IgdGVtcGxhdGVfbmFtZSBpbiB0ZW1wbGF0ZV9uYW1lczoKICAgICAgICBvbGRfbXRpbWUgPSB0ZW1wbGF0ZV9tdGltZV9jYWNoZS5nZXQodGVtcGxhdGVfbmFtZSwgTm9uZSkKICAgICAgICBuZXdfbXRpbWUgPSB0ZW1wbGF0ZV9tdGltZSh0ZW1wbGF0ZV9uYW1lKQogICAgICAgICMgZmlyc3QsIGNoZWNrIGlmIHRoZSBmaWxlcyB3ZXJlIG1vZGlmaWVkCiAgICAgICAgaWYgb2xkX210aW1lICE9IG5ld19tdGltZToKICAgICAgICAgICAgb2xkX3ZhbHVlID0gdGVtcGxhdGVfdmFsdWVfY2FjaGUuZ2V0KHRlbXBsYXRlX25hbWUsIE5vbmUpCiAgICAgICAgICAgIG5ld192YWx1ZSA9IHRlbXBsYXRlX3ZhbHVlKHRlbXBsYXRlX25hbWUpCiAgICAgICAgICAgICMgc2Vjb25kLCBjaGVjayBpZiB0aGUgdmFsdWUgYWN0dWFsbHkgY2hhbmdlZAogICAgICAgICAgICBpZiBvbGRfdmFsdWUgIT0gbmV3X3ZhbHVlOgogICAgICAgICAgICAgICAgdGVtcGxhdGVfdmFsdWVfY2FjaGVbdGVtcGxhdGVfbmFtZV0gPSBuZXdfdmFsdWUKICAgICAgICAgICAgICAgIGNoYW5nZWRfdGVtcGxhdGVzICs9IFt0ZW1wbGF0ZV9uYW1lXQogICAgICAgICAgICB0ZW1wbGF0ZV9tdGltZV9jYWNoZVt0ZW1wbGF0ZV9uYW1lXSA9IG5ld19tdGltZQogICAgcmV0dXJuIGNoYW5nZWRfdGVtcGxhdGVzCgoKZGVmIG1haW4oc3luY19mb3JldmVyOiBib29sKToKICAgICMgaW5pdGlhbCBzeW5jIG9mIHRlbXBsYXRlIGNhY2hlCiAgICByZWZyZXNoX3RlbXBsYXRlX2NhY2hlKAogICAgICAgIHRlbXBsYXRlX25hbWVzPVZBUl9fVEVNUExBVEVfTkFNRVMsCiAgICAgICAgdGVtcGxhdGVfbXRpbWVfY2FjaGU9VkFSX19URU1QTEFURV9NVElNRV9DQUNIRSwKICAgICAgICB0ZW1wbGF0ZV92YWx1ZV9jYWNoZT1WQVJfX1RFTVBMQVRFX1ZBTFVFX0NBQ0hFCiAgICApCgogICAgIyBpbml0aWFsIHN5bmMgb2Ygb2JqZWN0cyBpbnRvIEFpcmZsb3cgREIKICAgIHN5bmNfd2l0aF9haXJmbG93KCkKCiAgICBpZiBzeW5jX2ZvcmV2ZXI6CiAgICAgICAgIyBkZWZpbmUgdmFyaWFibGVzIHVzZWQgdG8gdHJhY2sgaG93IGxvbmcgc2luY2UgbGFzdCByZWZyZXNoL3N5bmMKICAgICAgICB0ZW1wbGF0ZXNfc3luY19lcG9jaCA9IHRpbWUudGltZSgpCiAgICAgICAgb2JqZWN0c19zeW5jX2Vwb2NoID0gdGltZS50aW1lKCkKCiAgICAgICAgIyBtYWluIGxvb3AKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAjIG1vbml0b3IgZm9yIHRlbXBsYXRlIHNlY3JldC9jb25maWdtYXAgdXBkYXRlcwogICAgICAgICAgICBpZiAodGltZS50aW1lKCkgLSB0ZW1wbGF0ZXNfc3luY19lcG9jaCkgPiBDT05GX19URU1QTEFURVNfU1lOQ19JTlRFUlZBTDoKICAgICAgICAgICAgICAgIGxvZ2dpbmcuZGVidWcoZiJ0ZW1wbGF0ZSBzeW5jIGludGVydmFsIHJlYWNoZWQsIHJlLXN5bmNpbmcgYWxsIHRlbXBsYXRlcy4uLiIpCiAgICAgICAgICAgICAgICBjaGFuZ2VkX3RlbXBsYXRlcyA9IHJlZnJlc2hfdGVtcGxhdGVfY2FjaGUoCiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVfbmFtZXM9VkFSX19URU1QTEFURV9OQU1FUywKICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZV9tdGltZV9jYWNoZT1WQVJfX1RFTVBMQVRFX01USU1FX0NBQ0hFLAogICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlX3ZhbHVlX2NhY2hlPVZBUl9fVEVNUExBVEVfVkFMVUVfQ0FDSEUKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHRlbXBsYXRlc19zeW5jX2Vwb2NoID0gdGltZS50aW1lKCkKICAgICAgICAgICAgICAgIGlmIGNoYW5nZWRfdGVtcGxhdGVzOgogICAgICAgICAgICAgICAgICAgIGxvZ2dpbmcuaW5mbyhmInRlbXBsYXRlIHZhbHVlcyBoYXZlIGNoYW5nZWQ6IFt7JywnLmpvaW4oY2hhbmdlZF90ZW1wbGF0ZXMpfV0iKQogICAgICAgICAgICAgICAgICAgIHN5bmNfd2l0aF9haXJmbG93KCkKICAgICAgICAgICAgICAgICAgICBvYmplY3RzX3N5bmNfZXBvY2ggPSB0aW1lLnRpbWUoKQoKICAgICAgICAgICAgIyBtb25pdG9yIGZvciBleHRlcm5hbCBjaGFuZ2VzIHRvIG9iamVjdHMgKGxpa2UgZnJvbSBVSSkKICAgICAgICAgICAgaWYgKHRpbWUudGltZSgpIC0gb2JqZWN0c19zeW5jX2Vwb2NoKSA+IENPTkZfX09CSkVDVFNfU1lOQ19JTlRFUlZBTDoKICAgICAgICAgICAgICAgIGxvZ2dpbmcuZGVidWcoZiJzeW5jIGludGVydmFsIHJlYWNoZWQsIHJlLXN5bmNpbmcgYWxsIG9iamVjdHMuLi4iKQogICAgICAgICAgICAgICAgc3luY193aXRoX2FpcmZsb3coKQogICAgICAgICAgICAgICAgb2JqZWN0c19zeW5jX2Vwb2NoID0gdGltZS50aW1lKCkKCiAgICAgICAgICAgICMgZW5zdXJlIHdlIGRvbnQgbG9vcCB0b28gZmFzdAogICAgICAgICAgICB0aW1lLnNsZWVwKDAuNSkKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIyBFTkQ6IEdMT0JBTCBDT0RFICMjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCgojIyMjIyMjIyMjIyMjCiMjIEltcG9ydHMgIyMKIyMjIyMjIyMjIyMjIwppbXBvcnQgc3lzCmZyb20gd2Vya3pldWcuc2VjdXJpdHkgaW1wb3J0IGNoZWNrX3Bhc3N3b3JkX2hhc2gsIGdlbmVyYXRlX3Bhc3N3b3JkX2hhc2gKaW1wb3J0IGFpcmZsb3cud3d3LmFwcCBhcyB3d3dfYXBwCmZsYXNrX2FwcCA9IHd3d19hcHAuY3JlYXRlX2FwcCgpCmZsYXNrX2FwcGJ1aWxkZXIgPSBmbGFza19hcHAuYXBwYnVpbGRlcgoKIyB3ZSB3YW50IHR5cGUgaGludHMsIGJ1dCBhaXJmbG93IGtlZXBzIG1vdmluZyB0aGUgYFVzZXJgIGFuZCBgUm9sZWAgbW9kZWxzIGFyb3VuZAojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICjila/CsOKWocKwKeKVr++4tSDilLvilIHilLsKZnJvbSB0eXBpbmcgaW1wb3J0IEFueQpVc2VyID0gQW55ClJvbGUgPSBBbnkKCiMjIyMjIyMjIyMjIyMKIyMgQ2xhc3NlcyAjIwojIyMjIyMjIyMjIyMjCmNsYXNzIFVzZXJXcmFwcGVyKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oCiAgICAgICAgICAgIHNlbGYsCiAgICAgICAgICAgIHVzZXJuYW1lOiBzdHIsCiAgICAgICAgICAgIGZpcnN0X25hbWU6IE9wdGlvbmFsW3N0cl0gPSBOb25lLAogICAgICAgICAgICBsYXN0X25hbWU6IE9wdGlvbmFsW3N0cl0gPSBOb25lLAogICAgICAgICAgICBlbWFpbDogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgICAgIHJvbGVzOiBPcHRpb25hbFtMaXN0W3N0cl1dID0gTm9uZSwKICAgICAgICAgICAgcGFzc3dvcmQ6IE9wdGlvbmFsW3N0cl0gPSBOb25lCiAgICApOgogICAgICAgIHNlbGYudXNlcm5hbWUgPSB1c2VybmFtZQogICAgICAgIHNlbGYuX2ZpcnN0X25hbWUgPSBmaXJzdF9uYW1lCiAgICAgICAgc2VsZi5fbGFzdF9uYW1lID0gbGFzdF9uYW1lCiAgICAgICAgc2VsZi5fZW1haWwgPSBlbWFpbAogICAgICAgIHNlbGYucm9sZXMgPSByb2xlcwogICAgICAgIHNlbGYuX3Bhc3N3b3JkID0gcGFzc3dvcmQKCiAgICBAcHJvcGVydHkKICAgIGRlZiBmaXJzdF9uYW1lKHNlbGYpIC0+IHN0cjoKICAgICAgICByZXR1cm4gc3RyaW5nX3N1YnN0aXR1dGlvbihzZWxmLl9maXJzdF9uYW1lLCBWQVJfX1RFTVBMQVRFX1ZBTFVFX0NBQ0hFKQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGxhc3RfbmFtZShzZWxmKSAtPiBzdHI6CiAgICAgICAgcmV0dXJuIHN0cmluZ19zdWJzdGl0dXRpb24oc2VsZi5fbGFzdF9uYW1lLCBWQVJfX1RFTVBMQVRFX1ZBTFVFX0NBQ0hFKQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGVtYWlsKHNlbGYpIC0+IHN0cjoKICAgICAgICByZXR1cm4gc3RyaW5nX3N1YnN0aXR1dGlvbihzZWxmLl9lbWFpbCwgVkFSX19URU1QTEFURV9WQUxVRV9DQUNIRSkKCiAgICBAcHJvcGVydHkKICAgIGRlZiBwYXNzd29yZChzZWxmKSAtPiBzdHI6CiAgICAgICAgcmV0dXJuIHN0cmluZ19zdWJzdGl0dXRpb24oc2VsZi5fcGFzc3dvcmQsIFZBUl9fVEVNUExBVEVfVkFMVUVfQ0FDSEUpCgogICAgZGVmIGFzX2RpY3Qoc2VsZikgLT4gRGljdFtzdHIsIHN0cl06CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgInVzZXJuYW1lIjogc2VsZi51c2VybmFtZSwKICAgICAgICAgICAgImZpcnN0X25hbWUiOiBzZWxmLmZpcnN0X25hbWUsCiAgICAgICAgICAgICJsYXN0X25hbWUiOiBzZWxmLmxhc3RfbmFtZSwKICAgICAgICAgICAgImVtYWlsIjogc2VsZi5lbWFpbCwKICAgICAgICAgICAgInJvbGVzIjogW2ZpbmRfcm9sZShyb2xlX25hbWU9cm9sZV9uYW1lKSBmb3Igcm9sZV9uYW1lIGluIHNlbGYucm9sZXNdLAogICAgICAgICAgICAicGFzc3dvcmQiOiBzZWxmLnBhc3N3b3JkCiAgICAgICAgfQoKCiMjIyMjIyMjIyMjIyMjIwojIyBWYXJpYWJsZXMgIyMKIyMjIyMjIyMjIyMjIyMjClZBUl9fVEVNUExBVEVfTkFNRVMgPSBbCl0KVkFSX19URU1QTEFURV9NVElNRV9DQUNIRSA9IHt9ClZBUl9fVEVNUExBVEVfVkFMVUVfQ0FDSEUgPSB7fQpWQVJfX1VTRVJfV1JBUFBFUlMgPSB7CiAgImFkbWluIjogVXNlcldyYXBwZXIoCiAgICB1c2VybmFtZT0iYWRtaW4iLAogICAgZmlyc3RfbmFtZT0iUGV0ZXIiLAogICAgbGFzdF9uYW1lPSJQYXJrZXIiLAogICAgZW1haWw9InNwaWRlcm1hbkBzdXBlcmhlcm8ub3JnIiwKICAgIHJvbGVzPVsgICAgICAgICJBZG1pbiIsCiAgICBdLAogICAgcGFzc3dvcmQ9ImFkbWluIiwKICApLAp9CgoKIyMjIyMjIyMjIyMjIyMjCiMjIEZ1bmN0aW9ucyAjIwojIyMjIyMjIyMjIyMjIyMKZGVmIGZpbmRfcm9sZShyb2xlX25hbWU6IHN0cikgLT4gUm9sZToKICAgICIiIgogICAgR2V0IHRoZSBGQUIgUm9sZSBtb2RlbCBhc3NvY2lhdGVkIHdpdGggYSBgcm9sZV9uYW1lYC4KICAgICIiIgogICAgZm91bmRfcm9sZSA9IGZsYXNrX2FwcGJ1aWxkZXIuc20uZmluZF9yb2xlKHJvbGVfbmFtZSkKICAgIGlmIGZvdW5kX3JvbGU6CiAgICAgICAgcmV0dXJuIGZvdW5kX3JvbGUKICAgIGVsc2U6CiAgICAgICAgdmFsaWRfcm9sZXMgPSBmbGFza19hcHBidWlsZGVyLnNtLmdldF9hbGxfcm9sZXMoKQogICAgICAgIGxvZ2dpbmcuZXJyb3IoZiJGYWlsZWQgdG8gZmluZCByb2xlPWB7cm9sZV9uYW1lfWAsIHZhbGlkIHJvbGVzIGFyZToge3ZhbGlkX3JvbGVzfSIpCiAgICAgICAgc3lzLmV4aXQoMSkKCgpkZWYgY29tcGFyZV9yb2xlX2xpc3RzKHJvbGVfbGlzdF8xOiBMaXN0W1JvbGVdLCByb2xlX2xpc3RfMjogTGlzdFtSb2xlXSkgLT4gYm9vbDoKICAgICIiIgogICAgQ2hlY2sgaWYgdHdvIGxpc3RzIG9mIEZBQiBSb2xlcyBjb250YWluIHRoZSBzYW1lIHJvbGVzIChpZ25vcmVzIGR1cGxpY2F0ZXMgYW5kIG9yZGVyKS4KICAgICIiIgogICAgbmFtZV9zZXRfMSA9IHNldChyb2xlLm5hbWUgZm9yIHJvbGUgaW4gcm9sZV9saXN0XzEpCiAgICBuYW1lX3NldF8yID0gc2V0KHJvbGUubmFtZSBmb3Igcm9sZSBpbiByb2xlX2xpc3RfMikKICAgIHJldHVybiBuYW1lX3NldF8xID09IG5hbWVfc2V0XzIKCgoKZGVmIGNvbXBhcmVfdXNlcnModXNlcl9kaWN0OiBEaWN0LCB1c2VyX21vZGVsOiBVc2VyKSAtPiBib29sOgogICAgIiIiCiAgICBDaGVjayBpZiB1c2VyIGluZm8gKHN0b3JlZCBpbiBkaWN0KSBpcyBpZGVudGljYWwgdG8gYSBGQUIgVXNlciBtb2RlbC4KICAgICIiIgogICAgcmV0dXJuICgKICAgICAgICAgICAgdXNlcl9kaWN0WyJ1c2VybmFtZSJdID09IHVzZXJfbW9kZWwudXNlcm5hbWUKICAgICAgICAgICAgYW5kIHVzZXJfZGljdFsiZmlyc3RfbmFtZSJdID09IHVzZXJfbW9kZWwuZmlyc3RfbmFtZQogICAgICAgICAgICBhbmQgdXNlcl9kaWN0WyJsYXN0X25hbWUiXSA9PSB1c2VyX21vZGVsLmxhc3RfbmFtZQogICAgICAgICAgICBhbmQgdXNlcl9kaWN0WyJlbWFpbCJdID09IHVzZXJfbW9kZWwuZW1haWwKICAgICAgICAgICAgYW5kIGNvbXBhcmVfcm9sZV9saXN0cyh1c2VyX2RpY3RbInJvbGVzIl0sIHVzZXJfbW9kZWwucm9sZXMpCiAgICAgICAgICAgIGFuZCBjaGVja19wYXNzd29yZF9oYXNoKHB3aGFzaD11c2VyX21vZGVsLnBhc3N3b3JkLCBwYXNzd29yZD11c2VyX2RpY3RbInBhc3N3b3JkIl0pCiAgICApCgoKZGVmIHN5bmNfdXNlcih1c2VyX3dyYXBwZXI6IFVzZXJXcmFwcGVyKSAtPiBOb25lOgogICAgIiIiCiAgICBTeW5jIHRoZSBVc2VyIGRlZmluZWQgYnkgYSBwcm92aWRlZCBVc2VyV3JhcHBlciBpbnRvIHRoZSBGQUIgREIuCiAgICAiIiIKICAgIHVzZXJuYW1lID0gdXNlcl93cmFwcGVyLnVzZXJuYW1lCiAgICB1X25ldyA9IHVzZXJfd3JhcHBlci5hc19kaWN0KCkKICAgIHVfb2xkID0gZmxhc2tfYXBwYnVpbGRlci5zbS5maW5kX3VzZXIodXNlcm5hbWU9dXNlcm5hbWUpCgogICAgaWYgbm90IHVfb2xkOgogICAgICAgIGxvZ2dpbmcuaW5mbyhmIlVzZXI9YHt1c2VybmFtZX1gIGlzIG1pc3NpbmcsIGFkZGluZy4uLiIpCiAgICAgICAgY3JlYXRlZF91c2VyID0gZmxhc2tfYXBwYnVpbGRlci5zbS5hZGRfdXNlcigKICAgICAgICAgICAgdXNlcm5hbWU9dV9uZXdbInVzZXJuYW1lIl0sCiAgICAgICAgICAgIGZpcnN0X25hbWU9dV9uZXdbImZpcnN0X25hbWUiXSwKICAgICAgICAgICAgbGFzdF9uYW1lPXVfbmV3WyJsYXN0X25hbWUiXSwKICAgICAgICAgICAgZW1haWw9dV9uZXdbImVtYWlsIl0sCiAgICAgICAgICAgICMgaW4gb2xkIHZlcnNpb25zIG9mIGZsYXNrX2FwcGJ1aWxkZXIgYGFkZF91c2VyKHJvbGU9YCBjYW4gb25seSBhZGQgZXhhY3RseSBvbmUgcm9sZQogICAgICAgICAgICAjICh1bmNoZWNrZWQgMCBpbmRleCBpcyBzYWZlIGJlY2F1c2Ugd2UgcmVxdWlyZSBhdCBsZWFzdCBvbmUgcm9sZSB1c2luZyBoZWxtIHZhbHVlcyB2YWxpZGF0aW9uKQogICAgICAgICAgICByb2xlPXVfbmV3WyJyb2xlcyJdWzBdLAogICAgICAgICAgICBwYXNzd29yZD11X25ld1sicGFzc3dvcmQiXQogICAgICAgICkKICAgICAgICBpZiBjcmVhdGVkX3VzZXI6CiAgICAgICAgICAgICMgYWRkIHRoZSBmdWxsIGxpc3Qgb2Ygcm9sZXMgKHdlIG9ubHkgYWRkZWQgdGhlIGZpcnN0IG9uZSBhYm92ZSkKICAgICAgICAgICAgY3JlYXRlZF91c2VyLnJvbGVzID0gdV9uZXdbInJvbGVzIl0KICAgICAgICAgICAgbG9nZ2luZy5pbmZvKGYiVXNlcj1ge3VzZXJuYW1lfWAgd2FzIHN1Y2Nlc3NmdWxseSBhZGRlZC4iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiJGYWlsZWQgdG8gYWRkIFVzZXI9YHt1c2VybmFtZX1gIikKICAgICAgICAgICAgc3lzLmV4aXQoMSkKICAgIGVsc2U6CiAgICAgICAgaWYgY29tcGFyZV91c2Vycyh1X25ldywgdV9vbGQpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbG9nZ2luZy5pbmZvKGYiVXNlcj1ge3VzZXJuYW1lfWAgZXhpc3RzIGJ1dCBoYXMgY2hhbmdlZCwgdXBkYXRpbmcuLi4iKQogICAgICAgICAgICB1X29sZC5maXJzdF9uYW1lID0gdV9uZXdbImZpcnN0X25hbWUiXQogICAgICAgICAgICB1X29sZC5sYXN0X25hbWUgPSB1X25ld1sibGFzdF9uYW1lIl0KICAgICAgICAgICAgdV9vbGQuZW1haWwgPSB1X25ld1siZW1haWwiXQogICAgICAgICAgICB1X29sZC5yb2xlcyA9IHVfbmV3WyJyb2xlcyJdCiAgICAgICAgICAgIHVfb2xkLnBhc3N3b3JkID0gZ2VuZXJhdGVfcGFzc3dvcmRfaGFzaCh1X25ld1sicGFzc3dvcmQiXSkKICAgICAgICAgICAgIyBzdHJhbmdlIGNoZWNrIGZvciBGYWxzZSBpcyBiZWNhdXNlIHVwZGF0ZV91c2VyKCkgcmV0dXJucyBOb25lIGZvciBzdWNjZXNzCiAgICAgICAgICAgICMgYnV0IGluIGZ1dHVyZSBtaWdodCByZXR1cm4gdGhlIFVzZXIgbW9kZWwKICAgICAgICAgICAgaWYgbm90IChmbGFza19hcHBidWlsZGVyLnNtLnVwZGF0ZV91c2VyKHVfb2xkKSBpcyBGYWxzZSk6CiAgICAgICAgICAgICAgICBsb2dnaW5nLmluZm8oZiJVc2VyPWB7dXNlcm5hbWV9YCB3YXMgc3VjY2Vzc2Z1bGx5IHVwZGF0ZWQuIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiJGYWlsZWQgdG8gdXBkYXRlIFVzZXI9YHt1c2VybmFtZX1gIikKICAgICAgICAgICAgICAgIHN5cy5leGl0KDEpCgoKZGVmIHN5bmNfYWxsX3VzZXJzKHVzZXJfd3JhcHBlcnM6IERpY3Rbc3RyLCBVc2VyV3JhcHBlcl0pIC0+IE5vbmU6CiAgICAiIiIKICAgIFN5bmMgYWxsIHVzZXJzIGluIHByb3ZpZGVkIGB1c2VyX3dyYXBwZXJzYC4KICAgICIiIgogICAgbG9nZ2luZy5pbmZvKCJCRUdJTjogYWlyZmxvdyB1c2VycyBzeW5jIikKICAgIGZvciB1c2VyX3dyYXBwZXIgaW4gdXNlcl93cmFwcGVycy52YWx1ZXMoKToKICAgICAgICBzeW5jX3VzZXIodXNlcl93cmFwcGVyKQogICAgbG9nZ2luZy5pbmZvKCJFTkQ6IGFpcmZsb3cgdXNlcnMgc3luYyIpCgogICAgIyBlbnN1cmVzIHRoYW4gYW55IFNRTEFsY2hlbXkgc2Vzc2lvbnMgYXJlIGNsb3NlZCAoc28gd2UgZG9uJ3QgaG9sZCBhIGNvbm5lY3Rpb24gdG8gdGhlIGRhdGFiYXNlKQogICAgZmxhc2tfYXBwLmRvX3RlYXJkb3duX2FwcGNvbnRleHQoKQoKCmRlZiBzeW5jX3dpdGhfYWlyZmxvdygpIC0+IE5vbmU6CiAgICAiIiIKICAgIFByZWZvcm0gYSBzeW5jIG9mIGFsbCBvYmplY3RzIHdpdGggYWlyZmxvdyAobm90ZSwgYHN5bmNfd2l0aF9haXJmbG93KClgIGlzIGNhbGxlZCBpbiBgbWFpbigpYCB0ZW1wbGF0ZSkuCiAgICAiIiIKICAgIHN5bmNfYWxsX3VzZXJzKHVzZXJfd3JhcHBlcnM9VkFSX19VU0VSX1dSQVBQRVJTKQoKCiMjIyMjIyMjIyMjIyMjCiMjIFJ1biBNYWluICMjCiMjIyMjIyMjIyMjIyMjCm1haW4oc3luY19mb3JldmVyPVRydWUp
kind: Secret
metadata:
  labels:
    app: airflow
    component: sync-users
  name: openmetadata-dependencies-sync-users
  namespace: default
type: Opaque
